student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ 
student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ 
student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ 
student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ 
student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ 
student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ 
student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ 
student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ tflocal init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Finding kreuzwerker/docker versions matching "3.0.2"...
- Installing hashicorp/aws v5.33.0...
- Installed hashicorp/aws v5.33.0 (signed by HashiCorp)
- Installing kreuzwerker/docker v3.0.2...
- Installed kreuzwerker/docker v3.0.2 (self-signed, key ID BD080C4571C6104C)

Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/cli/plugins/signing.html

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ tflocal plan
╷
│ Error: Missing required argument
│ 
│   on images.tf line 15, in resource "docker_image" "postgres":
│   15: resource "docker_image" "postgres" {
│ 
│ The argument "name" is required, but no definition was found.
╵
╷
│ Error: Unsupported argument
│ 
│   on images.tf line 16, in resource "docker_image" "postgres":
│   16:    image = "postgres:latest"
│ 
│ An argument named "image" is not expected here.
╵
╷
│ Error: Reference to undeclared resource
│ 
│   on main.tf line 32, in resource "docker_container" "db":
│   32: 	image = docker_image.ubuntu.image_id  
│ 
│ A managed resource "docker_image" "ubuntu" has not been declared in the root module.
╵
student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ tflocal plan
╷
│ Error: Missing required argument
│ 
│   on images.tf line 15, in resource "docker_image" "postgres":
│   15: resource "docker_image" "postgres" {
│ 
│ The argument "name" is required, but no definition was found.
╵
╷
│ Error: Unsupported argument
│ 
│   on images.tf line 16, in resource "docker_image" "postgres":
│   16:    image = "postgres:latest"
│ 
│ An argument named "image" is not expected here.
╵
student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ tflocal plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.db will be created
  + resource "docker_container" "db" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = [
          + "POSTGRES_DB=app",
          + "POSTGRES_PASSWORD=app_pass",
          + "POSTGRES_USER=app_user",
        ]
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "db"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + networks_advanced {
          + aliases = []
          + name    = "tfnet"
        }
    }

  # docker_container.example-app will be created
  + resource "docker_container" "example-app" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = [
          + "DB_ENGINE=postgresql",
          + "DB_HOST=db",
          + "DB_NAME=app",
          + "DB_PASS=app_pass",
          + "DB_PORT=5432",
          + "DB_USERNAME=app_user",
        ]
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "example-app"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + networks_advanced {
          + aliases = []
          + name    = "tfnet"
        }

      + ports {
          + external = 8000
          + internal = 8000
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.example_app will be created
  + resource "docker_image" "example_app" {
      + id          = (known after apply)
      + image_id    = (known after apply)
      + name        = "example_app"
      + repo_digest = (known after apply)

      + build {
          + build_arg    = {
              + "platform" = "linux/amd64"
            }
          + cache_from   = []
          + context      = "/home/student/iac-labs-infra/terraform/zad3/../../iac-labs/example-app"
          + dockerfile   = "Dockerfile"
          + extra_hosts  = []
          + label        = {
              + "author" = "student"
            }
          + remove       = true
          + security_opt = []
          + tag          = [
              + "example_app:latest",
            ]
        }
    }

  # docker_image.postgres will be created
  + resource "docker_image" "postgres" {
      + id          = (known after apply)
      + image_id    = (known after apply)
      + name        = "postgres:latest"
      + repo_digest = (known after apply)
    }

  # docker_network.shared will be created
  + resource "docker_network" "shared" {
      + attachable  = true
      + driver      = (known after apply)
      + id          = (known after apply)
      + internal    = (known after apply)
      + ipam_driver = "default"
      + name        = "tfnet"
      + options     = (known after apply)
      + scope       = (known after apply)
    }

Plan: 5 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + address = "http://localhost:8000"

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you
run "terraform apply" now.
student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ tflocal apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.db will be created
  + resource "docker_container" "db" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = [
          + "POSTGRES_DB=app",
          + "POSTGRES_PASSWORD=app_pass",
          + "POSTGRES_USER=app_user",
        ]
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "db"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + networks_advanced {
          + aliases = []
          + name    = "tfnet"
        }
    }

  # docker_container.example-app will be created
  + resource "docker_container" "example-app" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = [
          + "DB_ENGINE=postgresql",
          + "DB_HOST=db",
          + "DB_NAME=app",
          + "DB_PASS=app_pass",
          + "DB_PORT=5432",
          + "DB_USERNAME=app_user",
        ]
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "example-app"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + networks_advanced {
          + aliases = []
          + name    = "tfnet"
        }

      + ports {
          + external = 8000
          + internal = 8000
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.example_app will be created
  + resource "docker_image" "example_app" {
      + id          = (known after apply)
      + image_id    = (known after apply)
      + name        = "example_app"
      + repo_digest = (known after apply)

      + build {
          + build_arg    = {
              + "platform" = "linux/amd64"
            }
          + cache_from   = []
          + context      = "/home/student/iac-labs-infra/terraform/zad3/../../iac-labs/example-app"
          + dockerfile   = "Dockerfile"
          + extra_hosts  = []
          + label        = {
              + "author" = "student"
            }
          + remove       = true
          + security_opt = []
          + tag          = [
              + "example_app:latest",
            ]
        }
    }

  # docker_image.postgres will be created
  + resource "docker_image" "postgres" {
      + id          = (known after apply)
      + image_id    = (known after apply)
      + name        = "postgres:latest"
      + repo_digest = (known after apply)
    }

  # docker_network.shared will be created
  + resource "docker_network" "shared" {
      + attachable  = true
      + driver      = (known after apply)
      + id          = (known after apply)
      + internal    = (known after apply)
      + ipam_driver = "default"
      + name        = "tfnet"
      + options     = (known after apply)
      + scope       = (known after apply)
    }

Plan: 5 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + address = "http://localhost:8000"

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_image.postgres: Creating...
docker_network.shared: Creating...
docker_image.example_app: Creating...
docker_network.shared: Creation complete after 3s [id=acf8f9104ca0730ad7dd347063bf0ce8a81dad224a5b859b6b77ca0f1bfdff54]
docker_image.postgres: Still creating... [10s elapsed]
docker_image.example_app: Still creating... [10s elapsed]
docker_image.postgres: Still creating... [20s elapsed]
docker_image.example_app: Still creating... [20s elapsed]
docker_image.postgres: Creation complete after 29s [id=sha256:75b7bff7c3ad1ae4468a2107724459061dc87d2176f8f02747a360c32b8c58b9postgres:latest]
docker_container.db: Creating...
docker_image.example_app: Still creating... [30s elapsed]
docker_container.db: Creation complete after 3s [id=fd946752ac133d93bd5657107f3fb17abd0e09ce8459ec043c6654ef67a27365]
docker_image.example_app: Still creating... [40s elapsed]
docker_image.example_app: Still creating... [50s elapsed]
docker_image.example_app: Still creating... [1m0s elapsed]
docker_image.example_app: Still creating... [1m10s elapsed]
docker_image.example_app: Still creating... [1m20s elapsed]
docker_image.example_app: Creation complete after 1m30s [id=sha256:4e155fdce1b4c3e119c6505656c22dd3c2682ca7347cd54b23030bd9ca1a8bd8example_app]
docker_container.example-app: Creating...
docker_container.example-app: Creation complete after 1s [id=dbefbc63c7c93339fe793c9424a3c46db605ede4bd06900ce5a6a69e9b404ee4]

Apply complete! Resources: 5 added, 0 changed, 0 destroyed.

Outputs:

address = "http://localhost:8000"
student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ tflocal state list
docker_container.db
docker_container.example-app
docker_image.example_app
docker_image.postgres
docker_network.shared
student@student-ubuntu:~/iac-labs-infra/terraform/zad3$ 
