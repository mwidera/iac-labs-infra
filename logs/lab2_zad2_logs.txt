student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of kreuzwerker/docker from the dependency lock file
- Finding latest version of hashicorp/aws...
- Using previously-installed kreuzwerker/docker v2.24.0
- Installing hashicorp/aws v5.33.0...
- Installed hashicorp/aws v5.33.0 (signed by HashiCorp)

Terraform has made some changes to the provider dependency selections recorded
in the .terraform.lock.hcl file. Review those changes and commit them to your
version control system if they represent changes you intended to make.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.nginx will be created
  + resource "docker_container" "nginx" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + gateway                                     = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ip_address                                  = (known after apply)
      + ip_prefix_length                            = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "tutorial"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + ports {
          + external = 8080
          + internal = 80
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.nginx will be created
  + resource "docker_image" "nginx" {
      + id           = (known after apply)
      + image_id     = (known after apply)
      + keep_locally = false
      + latest       = (known after apply)
      + name         = "nginx:latest"
      + output       = (known after apply)
      + repo_digest  = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + address = "http://localhost:8080"
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and one more similar warning elsewhere)
╵

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you
run "terraform apply" now.
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal state list
No state file was found!

State management commands require a state file. Run this command
in a directory where Terraform has been run or use the -state flag
to point the command to a specific state location.
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ terraform state list
No state file was found!

State management commands require a state file. Run this command
in a directory where Terraform has been run or use the -state flag
to point the command to a specific state location.
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal how
Terraform has no command named "how". Did you mean "show"?

To see all of Terraform's top-level commands, run:
  terraform -help

student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal show
No state.
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.nginx will be created
  + resource "docker_container" "nginx" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + gateway                                     = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ip_address                                  = (known after apply)
      + ip_prefix_length                            = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "tutorial"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + ports {
          + external = 8080
          + internal = 80
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.nginx will be created
  + resource "docker_image" "nginx" {
      + id           = (known after apply)
      + image_id     = (known after apply)
      + keep_locally = false
      + latest       = (known after apply)
      + name         = "nginx:latest"
      + output       = (known after apply)
      + repo_digest  = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + address = "http://localhost:8080"
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and one more similar warning elsewhere)
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_image.nginx: Creating...
docker_image.nginx: Creation complete after 9s [id=sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest]
docker_container.nginx: Creating...
docker_container.nginx: Creation complete after 2s [id=a0340bd267d638a4f7c5085bcca636f9355c8d680c9b648c98c91edaf8b0e84d]
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and one more similar warning elsewhere)
╵

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

address = "http://localhost:8080"
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal state list
docker_container.nginx
docker_image.nginx
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal plan
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
╵
╷
│ Error: Missing required argument
│ 
│   on main.tf line 27, in resource "docker_tag" "tag_1":
│   27: resource "docker_tag" "tag_1" {
│ 
│ The argument "target_image" is required, but no definition was found.
╵
╷
│ Error: Missing required argument
│ 
│   on main.tf line 27, in resource "docker_tag" "tag_1":
│   27: resource "docker_tag" "tag_1" {
│ 
│ The argument "source_image" is required, but no definition was found.
╵
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal plan
docker_image.nginx: Refreshing state... [id=sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest]
docker_container.nginx: Refreshing state... [id=a0340bd267d638a4f7c5085bcca636f9355c8d680c9b648c98c91edaf8b0e84d]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_tag.tag_1 will be created
  + resource "docker_tag" "tag_1" {
      + id              = (known after apply)
      + source_image    = "sim1"
      + source_image_id = (known after apply)
      + target_image    = "dim1"
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and one more similar warning elsewhere)
╵

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you
run "terraform apply" now.
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal apply
docker_image.nginx: Refreshing state... [id=sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest]
docker_container.nginx: Refreshing state... [id=a0340bd267d638a4f7c5085bcca636f9355c8d680c9b648c98c91edaf8b0e84d]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_tag.tag_1 will be created
  + resource "docker_tag" "tag_1" {
      + id              = (known after apply)
      + source_image    = "sim1"
      + source_image_id = (known after apply)
      + target_image    = "dim1"
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and one more similar warning elsewhere)
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_tag.tag_1: Creating...
╷
│ Error: failed to create docker tag: Error response from daemon: No such image: sim1:latest
│ 
│   with docker_tag.tag_1,
│   on main.tf line 27, in resource "docker_tag" "tag_1":
│   27: resource "docker_tag" "tag_1" {
│ 
╵
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal state list
docker_container.nginx
docker_image.nginx
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal plan
docker_image.nginx: Refreshing state... [id=sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest]
docker_container.nginx: Refreshing state... [id=a0340bd267d638a4f7c5085bcca636f9355c8d680c9b648c98c91edaf8b0e84d]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_tag.tag_1 will be created
  + resource "docker_tag" "tag_1" {
      + id              = (known after apply)
      + source_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
      + source_image_id = (known after apply)
      + target_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and 5 more similar warnings elsewhere)
╵

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you
run "terraform apply" now.
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal apply
docker_image.nginx: Refreshing state... [id=sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest]
docker_container.nginx: Refreshing state... [id=a0340bd267d638a4f7c5085bcca636f9355c8d680c9b648c98c91edaf8b0e84d]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_tag.tag_1 will be created
  + resource "docker_tag" "tag_1" {
      + id              = (known after apply)
      + source_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
      + source_image_id = (known after apply)
      + target_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and 5 more similar warnings elsewhere)
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_tag.tag_1: Creating...
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 28, in resource "docker_tag" "tag_1":
│   28: 	source_image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and 3 more similar warnings elsewhere)
╵
╷
│ Error: failed to create docker tag: Error response from daemon: refusing to create an ambiguous tag using digest algorithm as name
│ 
│   with docker_tag.tag_1,
│   on main.tf line 27, in resource "docker_tag" "tag_1":
│   27: resource "docker_tag" "tag_1" {
│ 
╵
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ ^C
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ ^C
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal plan
docker_image.nginx: Refreshing state... [id=sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest]
docker_container.nginx: Refreshing state... [id=a0340bd267d638a4f7c5085bcca636f9355c8d680c9b648c98c91edaf8b0e84d]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_tag.tag_1dsadfasdfasd will be created
  + resource "docker_tag" "tag_1dsadfasdfasd" {
      + id              = (known after apply)
      + source_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
      + source_image_id = (known after apply)
      + target_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and 5 more similar warnings elsewhere)
╵

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you
run "terraform apply" now.
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal apply
docker_image.nginx: Refreshing state... [id=sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest]
docker_container.nginx: Refreshing state... [id=a0340bd267d638a4f7c5085bcca636f9355c8d680c9b648c98c91edaf8b0e84d]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_tag.tag_1dsadfasdfasd will be created
  + resource "docker_tag" "tag_1dsadfasdfasd" {
      + id              = (known after apply)
      + source_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
      + source_image_id = (known after apply)
      + target_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and 5 more similar warnings elsewhere)
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_tag.tag_1dsadfasdfasd: Creating...
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 28, in resource "docker_tag" "tag_1dsadfasdfasd":
│   28: 	source_image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and 3 more similar warnings elsewhere)
╵
╷
│ Error: failed to create docker tag: Error response from daemon: refusing to create an ambiguous tag using digest algorithm as name
│ 
│   with docker_tag.tag_1dsadfasdfasd,
│   on main.tf line 27, in resource "docker_tag" "tag_1dsadfasdfasd":
│   27: resource "docker_tag" "tag_1dsadfasdfasd" {
│ 
╵
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal plan
╷
│ Error: Invalid resource name
│ 
│   on main.tf line 27, in resource "docker_tag" "tag<index>":
│   27: resource "docker_tag" "tag<index>" {
│ 
│ A name must start with a letter or underscore and may contain only letters, digits, underscores, and dashes.
╵
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal plan
╷
│ Error: Invalid resource name
│ 
│   on main.tf line 27, in resource "docker_tag" "tag_<index>":
│   27: resource "docker_tag" "tag_<index>" {
│ 
│ A name must start with a letter or underscore and may contain only letters, digits, underscores, and dashes.
╵
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal plan
docker_image.nginx: Refreshing state... [id=sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest]
docker_container.nginx: Refreshing state... [id=a0340bd267d638a4f7c5085bcca636f9355c8d680c9b648c98c91edaf8b0e84d]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_tag.ngimage1 will be created
  + resource "docker_tag" "ngimage1" {
      + id              = (known after apply)
      + source_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
      + source_image_id = (known after apply)
      + target_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and 5 more similar warnings elsewhere)
╵

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you
run "terraform apply" now.
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal apply
docker_image.nginx: Refreshing state... [id=sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest]
docker_container.nginx: Refreshing state... [id=a0340bd267d638a4f7c5085bcca636f9355c8d680c9b648c98c91edaf8b0e84d]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_tag.ngimage1 will be created
  + resource "docker_tag" "ngimage1" {
      + id              = (known after apply)
      + source_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
      + source_image_id = (known after apply)
      + target_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and 5 more similar warnings elsewhere)
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_tag.ngimage1: Creating...
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 28, in resource "docker_tag" "ngimage1":
│   28: 	source_image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and 3 more similar warnings elsewhere)
╵
╷
│ Error: failed to create docker tag: Error response from daemon: refusing to create an ambiguous tag using digest algorithm as name
│ 
│   with docker_tag.ngimage1,
│   on main.tf line 27, in resource "docker_tag" "ngimage1":
│   27: resource "docker_tag" "ngimage1" {
│ 
╵
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ ^C
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal plan
docker_image.nginx: Refreshing state... [id=sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest]
docker_container.nginx: Refreshing state... [id=a0340bd267d638a4f7c5085bcca636f9355c8d680c9b648c98c91edaf8b0e84d]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_tag.ngimage1 will be created
  + resource "docker_tag" "ngimage1" {
      + id              = (known after apply)
      + source_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
      + source_image_id = (known after apply)
      + target_image    = "my-nginx.latest"
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and 3 more similar warnings elsewhere)
╵

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you
run "terraform apply" now.
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal apply
docker_image.nginx: Refreshing state... [id=sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6nginx:latest]
docker_container.nginx: Refreshing state... [id=a0340bd267d638a4f7c5085bcca636f9355c8d680c9b648c98c91edaf8b0e84d]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_tag.ngimage1 will be created
  + resource "docker_tag" "ngimage1" {
      + id              = (known after apply)
      + source_image    = "sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6"
      + source_image_id = (known after apply)
      + target_image    = "my-nginx.latest"
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 19, in resource "docker_container" "nginx":
│   19:   image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and 3 more similar warnings elsewhere)
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_tag.ngimage1: Creating...
docker_tag.ngimage1: Creation complete after 0s [id=sha256:a8758716bb6aa4d90071160d27028fe4eaee7ce8166221a97d30440c8eac2be6.my-nginx.latest]
╷
│ Warning: Deprecated attribute
│ 
│   on main.tf line 28, in resource "docker_tag" "ngimage1":
│   28: 	source_image = docker_image.nginx.latest
│ 
│ The attribute "latest" is deprecated. Refer to the provider documentation for details.
│ 
│ (and one more similar warning elsewhere)
╵

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

address = "http://localhost:8080"
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ tflocal state list
docker_container.nginx
docker_image.nginx
docker_tag.ngimage1
student@student-ubuntu:~/iac-labs-infra/terraform/zad2$ 

